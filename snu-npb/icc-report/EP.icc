Benchmark: EP
Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.0.117 Build 20180804

Compiler options: -O3 -g -parallel -vec -ipo -ip-no-inlining -unroll0 -mcmodel=medium -xHost -qopt-report=5 -qopt-report-phase=vec,par,loop,ipo -qopt-report-file=report.txt -qopenmp-stubs -debug inline-debug-info -g -rdynamic -o ep -lm

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: disabled
  -inline-max-per-compile: disabled

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: timer_read..1(int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (timer_read..1(int)) [1/17=5.9%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/c_timers.c(72,1)
  CLONED FROM: timer_read(int)(2)

===========================================================================

Begin optimization report for: timer_read..2(int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (timer_read..2(int)) [2/17=11.8%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/c_timers.c(72,1)
  CLONED FROM: timer_read(int)(1)

===========================================================================

Begin optimization report for: timer_read..0(int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (timer_read..0(int)) [3/17=17.6%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/c_timers.c(72,1)
  CLONED FROM: timer_read(int)(0)

===========================================================================

Begin optimization report for: print_results(char *, char, int, int, int, int, double, double, char *, logical, char *, char *, char *, char *, char *, char *, char *, char *, char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (print_results(char *, char, int, int, int, int, double, double, char *, logical, char *, char *, char *, char *, char *, char *, char *, char *, char *)) [4/17=23.5%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/print_results.c(14,1)
  -> EXTERN: (33,3) printf(const char *__restrict__, ...)
  -> EXTERN: (34,3) printf(const char *__restrict__, ...)
  -> EXTERN: (43,7) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (43,33) exp2
  -> EXTERN: (50,7) printf(const char *__restrict__, ...)
  -> EXTERN: (52,7) printf(const char *__restrict__, ...)
  -> EXTERN: (55,5) printf(const char *__restrict__, ...)
  -> EXTERN: (58,3) printf(const char *__restrict__, ...)
  -> EXTERN: (59,3) printf(const char *__restrict__, ...)
  -> EXTERN: (61,3) printf(const char *__restrict__, ...)
  -> EXTERN: (62,3) printf(const char *__restrict__, ...)
  -> EXTERN: (66,3) printf(const char *__restrict__, ...)
  -> EXTERN: (67,3) printf(const char *__restrict__, ...)
  -> EXTERN: (69,3) printf(const char *__restrict__, ...)
  -> EXTERN: (71,5) printf(const char *__restrict__, ...)
  -> EXTERN: (73,5) printf(const char *__restrict__, ...)
  -> EXTERN: (74,3) printf(const char *__restrict__, ...)
  -> EXTERN: (75,3) printf(const char *__restrict__, ...)
  -> EXTERN: (77,3) printf(const char *__restrict__, ...)
  -> EXTERN: (79,3) printf(const char *__restrict__, ...)
  -> EXTERN: (80,3) printf(const char *__restrict__, ...)
  -> EXTERN: (81,3) printf(const char *__restrict__, ...)
  -> EXTERN: (82,3) printf(const char *__restrict__, ...)
  -> EXTERN: (83,3) printf(const char *__restrict__, ...)
  -> EXTERN: (84,3) printf(const char *__restrict__, ...)
  -> EXTERN: (86,3) printf(const char *__restrict__, ...)

===========================================================================

Begin optimization report for: wtime_(double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (wtime_(double *)) [5/17=29.4%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/wtime.c(8,1)
  -> EXTERN: (12,4) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)

===========================================================================

Begin optimization report for: elapsed_time(void)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (elapsed_time(void)) [6/17=35.3%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/c_timers.c(15,1)
  -> (22,5) wtime_(double *) (isz = 15) (sz = 20)
     [[ Callee not marked with inlining pragma  <1>]]

===========================================================================

Begin optimization report for: timer_stop(int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (timer_stop(int)) [7/17=41.2%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/c_timers.c(57,1)
  -> (60,11) elapsed_time(void) (isz = 2) (sz = 7)
     [[ Callee not marked with inlining pragma  <1>]]

===========================================================================

Begin optimization report for: randlc(double *, double)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (randlc(double *, double)) [8/17=47.1%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/randdp.c(5,1)

===========================================================================

Begin optimization report for: vranlc..1(int, double *, double, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (vranlc..1(int, double *, double, double *)) [9/17=52.9%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/randdp.c(72,1)
  CLONED FROM: vranlc(int, double *, double, double *)(131072,X,X,X)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/randdp.c(122,3)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between *x (129:5) and *x (136:6)
   remark #17106: parallel dependence: assumed FLOW dependence between *x (136:6) and *x (129:5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between *x (129:5) and *x (136:6)
   remark #15346: vector dependence: assumed FLOW dependence between *x (136:6) and *x (129:5)
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/randdp.c(122,3)
<Multiversioned v2>
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between *x (129:5) and y[i] (137:5)
   remark #17106: parallel dependence: assumed FLOW dependence between y[i] (137:5) and *x (129:5)
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END
===========================================================================

Begin optimization report for: timer_start(int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (timer_start(int)) [10/17=58.8%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/c_timers.c(48,1)
  -> (49,16) elapsed_time(void) (isz = 2) (sz = 7)
     [[ Callee not marked with inlining pragma  <1>]]

===========================================================================

Begin optimization report for: vranlc..0(int, double *, double, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (vranlc..0(int, double *, double, double *)) [11/17=64.7%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/randdp.c(72,1)
  CLONED FROM: vranlc(int, double *, double, double *)(0,X,X,X)

===========================================================================

Begin optimization report for: timer_clear(int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (timer_clear(int)) [12/17=70.6%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/c_timers.c(38,1)

===========================================================================

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [13/17=76.5%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(75,1)
  -> EXTERN: (84,17) ?1memcpy
  -> EXTERN: (89,13) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (93,5) fclose(FILE *)
  -> EXTERN: (103,3) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (107,3) printf(const char *__restrict__, ...)
  -> EXTERN: (108,3) printf(const char *__restrict__, ...)
  -> EXTERN: (109,3) printf(const char *__restrict__, ...)
  -> EXTERN: (109,61) omp_get_max_threads(void)
  -> CP_CLONE (128,3) vranlc..0(int, double *, double, double *) (isz = 56) (sz = 67)
     [[ Callee not marked with inlining pragma  <1>]]
  -> (129,12) randlc(double *, double) (isz = 45) (sz = 54)
     [[ Callee not marked with inlining pragma  <1>]]
  -> (140,5) timer_clear(int) (isz = 2) (sz = 7)
     [[ Callee not marked with inlining pragma  <1>]]
  -> (141,25) timer_clear(int) (isz = 2) (sz = 7)
     [[ Callee not marked with inlining pragma  <1>]]
  -> (142,25) timer_clear(int) (isz = 2) (sz = 7)
     [[ Callee not marked with inlining pragma  <1>]]
  -> (144,3) timer_start(int) (isz = 2) (sz = 7)
     [[ Callee not marked with inlining pragma  <1>]]
  -> CP_CLONE (147,3) vranlc..0(int, double *, double, double *) (isz = 56) (sz = 67)
     [[ Callee not marked with inlining pragma  <1>]]
  -> (156,10) randlc(double *, double) (isz = 45) (sz = 54)
     [[ Callee not marked with inlining pragma  <1>]]
  -> (193,34) randlc(double *, double) (isz = 45) (sz = 54)
     [[ Callee not marked with inlining pragma  <1>]]
  -> (195,14) randlc(double *, double) (isz = 45) (sz = 54)
     [[ Callee not marked with inlining pragma  <1>]]
  -> (202,27) timer_start(int) (isz = 2) (sz = 7)
     [[ Callee not marked with inlining pragma  <1>]]
  -> CP_CLONE (203,7) vranlc..1(int, double *, double, double *) (isz = 56) (sz = 67)
     [[ Callee not marked with inlining pragma  <1>]]
  -> (204,27) timer_stop(int) (isz = 12) (sz = 17)
     [[ Callee not marked with inlining pragma  <1>]]
  -> (211,27) timer_start(int) (isz = 2) (sz = 7)
     [[ Callee not marked with inlining pragma  <1>]]
  -> EXTERN: (218,31) log(double)
  -> (228,27) timer_stop(int) (isz = 12) (sz = 17)
     [[ Callee not marked with inlining pragma  <1>]]
  -> (241,3) timer_stop(int) (isz = 12) (sz = 17)
     [[ Callee not marked with inlining pragma  <1>]]
  -> CP_CLONE (242,8) timer_read..0(int) (isz = 0) (sz = 6)
     [[ Callee not marked with inlining pragma  <1>]]
  -> EXTERN: (279,3) printf(const char *__restrict__, ...)
  -> EXTERN: (280,3) printf(const char *__restrict__, ...)
  -> EXTERN: (281,3) printf(const char *__restrict__, ...)
  -> EXTERN: (282,3) printf(const char *__restrict__, ...)
  -> EXTERN: (283,3) printf(const char *__restrict__, ...)
  -> EXTERN: (284,3) printf(const char *__restrict__, ...)
  -> EXTERN: (286,5) printf(const char *__restrict__, ...)
  -> (289,3) print_results(char *, char, int, int, int, int, double, double, char *, logical, char *, char *, char *, char *, char *, char *, char *, char *, char *) (isz = 148) (sz = 189)
     [[ Callee not marked with inlining pragma  <1>]]
  -> CP_CLONE (297,10) timer_read..0(int) (isz = 0) (sz = 6)
     [[ Callee not marked with inlining pragma  <1>]]
  -> EXTERN: (298,5) printf(const char *__restrict__, ...)
  -> CP_CLONE (299,10) timer_read..2(int) (isz = 0) (sz = 6)
     [[ Callee not marked with inlining pragma  <1>]]
  -> EXTERN: (300,5) printf(const char *__restrict__, ...)
  -> CP_CLONE (301,10) timer_read..1(int) (isz = 0) (sz = 6)
     [[ Callee not marked with inlining pragma  <1>]]
  -> EXTERN: (302,5) printf(const char *__restrict__, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(132,5)
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ } private={ } firstprivate={ i } lastprivate={ } firstlastprivate={ } reduction={ }
   remark #15388: vectorization support: reference x[i] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(133,7) ]
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 4.000 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=32768
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(155,3)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15382: vectorization support: call to function randlc(double *, double) cannot be vectorized   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(156,10) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #25015: Estimate of max trip count of loop=17
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(165,3)
   remark #25045: Fused Loops: ( 165 179 )

   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference q[i] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(166,5) ]
   remark #15388: vectorization support: reference qq[i] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(180,7) ]
   remark #15305: vectorization support: vector length 4
   remark #15301: FUSED LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.500 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(179,5)
   remark #25046: Loop lost in Fusion 
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(165,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference q[i] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(166,5) ]
   remark #15388: vectorization support: reference qq[i] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(180,7) ]
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(184,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between t1 (186:7) and t1 (216:9)
   remark #17106: parallel dependence: assumed OUTPUT dependence between t1 (216:9) and t1 (186:7)
   remark #15382: vectorization support: call to function randlc(double *, double) cannot be vectorized   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(193,34) ]
   remark #15382: vectorization support: call to function randlc(double *, double) cannot be vectorized   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(195,14) ]
   remark #15382: vectorization support: call to function timer_start(int) cannot be vectorized   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(202,27) ]
   remark #15382: vectorization support: call to function vranlc..1(int, double *, double, double *) cannot be vectorized   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(203,7) ]
   remark #15382: vectorization support: call to function timer_stop(int) cannot be vectorized   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(204,27) ]
   remark #15382: vectorization support: call to function timer_start(int) cannot be vectorized   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(211,27) ]
   remark #15382: vectorization support: call to function timer_stop(int) cannot be vectorized   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(228,27) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between t1 (186:7) and t1 (216:9)
   remark #15346: vector dependence: assumed OUTPUT dependence between t1 (216:9) and t1 (186:7)
   remark #25015: Estimate of max trip count of loop=16384

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(191,7)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(196,9) ]
      remark #25015: Estimate of max trip count of loop=100
   LOOP END

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(213,7)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between qq[l] (222:11) and qq[l] (222:11)
      remark #17106: parallel dependence: assumed ANTI dependence between qq[l] (222:11) and qq[l] (222:11)
      remark #17106: parallel dependence: assumed OUTPUT dependence between qq[l] (222:11) and qq[l] (222:11)
      remark #17106: parallel dependence: assumed OUTPUT dependence between qq[l] (222:11) and qq[l] (222:11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between qq[l] (222:11) and qq[l] (222:11)
      remark #15346: vector dependence: assumed ANTI dependence between qq[l] (222:11) and qq[l] (222:11)
      remark #25015: Estimate of max trip count of loop=65536
   LOOP END

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(213,7)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between qq[l] (222:11) and qq[l] (222:11)
      remark #17106: parallel dependence: assumed ANTI dependence between qq[l] (222:11) and qq[l] (222:11)
      remark #17106: parallel dependence: assumed OUTPUT dependence between qq[l] (222:11) and qq[l] (222:11)
      remark #17106: parallel dependence: assumed OUTPUT dependence between qq[l] (222:11) and qq[l] (222:11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between qq[l] (222:11) and qq[l] (222:11)
      remark #15346: vector dependence: assumed ANTI dependence between qq[l] (222:11) and qq[l] (222:11)
      remark #25015: Estimate of max trip count of loop=65536
   LOOP END
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(231,5)
   remark #25045: Fused Loops: ( 231 237 )

   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference q[i] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(233,7) ]
   remark #15388: vectorization support: reference q[i] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(233,7) ]
   remark #15388: vectorization support: reference qq[i] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(233,15) ]
   remark #15388: vectorization support: reference q[i] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(238,15) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.300
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 1.740 
   remark #15488: --- end vector cost summary ---
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   remark #25015: Estimate of max trip count of loop=10
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(237,3)
   remark #25046: Loop lost in Fusion 
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(285,3)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(286,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #25015: Estimate of max trip count of loop=10
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(132,5)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(132,5)
   remark #15388: vectorization support: reference x[i] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(133,7) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=32768
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/EP/src/ep.c(132,5)
<Remainder loop for vectorization>
   remark #25015: Estimate of max trip count of loop=131072
LOOP END

Fusion of IFs performed in main at line 141

Fusion of IFs performed in main at line 204

Fusion of IFs performed in main at line 204
===========================================================================

Begin optimization report for: vranlc(int, double *, double, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (vranlc(int, double *, double, double *)) [14/17=82.4%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/randdp.c(72,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/randdp.c(122,3)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between *x (129:5) and *x (136:6)
   remark #17106: parallel dependence: assumed FLOW dependence between *x (136:6) and *x (129:5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between *x (129:5) and *x (136:6)
   remark #15346: vector dependence: assumed FLOW dependence between *x (136:6) and *x (129:5)
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/randdp.c(122,3)
<Multiversioned v2>
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between *x (129:5) and y[i] (137:5)
   remark #17106: parallel dependence: assumed FLOW dependence between y[i] (137:5) and *x (129:5)
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END
===========================================================================

Begin optimization report for: timer_read(int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (timer_read(int)) [15/17=88.2%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/c_timers.c(72,1)

===========================================================================

Begin optimization report for: c_print_results(char *, char, int, int, int, int, double, double, char *, int, char *, char *, char *, char *, char *, char *, char *, char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (c_print_results(char *, char, int, int, int, int, double, double, char *, int, char *, char *, char *, char *, char *, char *, char *, char *)) [16/17=94.1%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/c_print_results.c(28,1)
  -> EXTERN: (46,5) printf(const char *__restrict__, ...)
  -> EXTERN: (48,5) printf(const char *__restrict__, ...)
  -> EXTERN: (53,9) printf(const char *__restrict__, ...)
  -> EXTERN: (56,9) printf(const char *__restrict__, ...)
  -> EXTERN: (58,5) printf(const char *__restrict__, ...)
  -> EXTERN: (60,5) printf(const char *__restrict__, ...)
  -> EXTERN: (62,5) printf(const char *__restrict__, ...)
  -> EXTERN: (64,5) printf(const char *__restrict__, ...)
  -> EXTERN: (69,5) printf(const char *__restrict__, ...)
  -> EXTERN: (71,5) printf(const char *__restrict__, ...)
  -> EXTERN: (74,5) printf(const char *__restrict__, ...)
  -> EXTERN: (77,9) printf(const char *__restrict__, ...)
  -> EXTERN: (79,9) printf(const char *__restrict__, ...)
  -> EXTERN: (81,9) printf(const char *__restrict__, ...)
  -> EXTERN: (83,5) printf(const char *__restrict__, ...)
  -> EXTERN: (85,5) printf(const char *__restrict__, ...)
  -> EXTERN: (87,5) printf(const char *__restrict__, ...)
  -> EXTERN: (89,5) printf(const char *__restrict__, ...)
  -> EXTERN: (91,5) printf(const char *__restrict__, ...)
  -> EXTERN: (93,5) printf(const char *__restrict__, ...)
  -> EXTERN: (95,5) printf(const char *__restrict__, ...)
  -> EXTERN: (97,5) printf(const char *__restrict__, ...)
  -> EXTERN: (99,5) printf(const char *__restrict__, ...)
  -> EXTERN: (101,5) printf(const char *__restrict__, ...)
  -> EXTERN: (102,5) printf(const char *__restrict__, ...)
  -> EXTERN: (103,5) printf(const char *__restrict__, ...)
  -> EXTERN: (104,5) printf(const char *__restrict__, ...)
  -> EXTERN: (105,5) printf(const char *__restrict__, ...)
  -> EXTERN: (106,5) printf(const char *__restrict__, ...)

===========================================================================

Begin optimization report for: timer_count(int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (timer_count(int)) [17/17=100.0%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/c_timers.c(77,1)

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The compiler's heuristics indicate that the function is not profitable to 
    inline.  Override this decision by adding "inline 
    __attribute__((always_inline))" to the declaration of the called function, 
    or add "#pragma forceinline" before the call site.

