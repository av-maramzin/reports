Benchmark: CG
Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.0.117 Build 20180804

Compiler options: -O3 -g -parallel -vec -ipo -ip-no-inlining -unroll0 -mcmodel=medium -xHost -qopt-report=5 -qopt-report-phase=vec,par,loop,ipo -qopt-report-file=report.txt -qopenmp-stubs -debug inline-debug-info -g -rdynamic -o cg -lm

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: disabled
  -inline-max-per-compile: disabled

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: timer_read(int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (timer_read(int)) [1/18=5.6%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/c_timers.c(72,1)

===========================================================================

Begin optimization report for: print_results(char *, char, int, int, int, int, double, double, char *, logical, char *, char *, char *, char *, char *, char *, char *, char *, char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (print_results(char *, char, int, int, int, int, double, double, char *, logical, char *, char *, char *, char *, char *, char *, char *, char *, char *)) [2/18=11.1%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/print_results.c(14,1)
  -> EXTERN: (33,3) printf(const char *__restrict__, ...)
  -> EXTERN: (34,3) printf(const char *__restrict__, ...)
  -> EXTERN: (43,7) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (43,33) exp2
  -> EXTERN: (50,7) printf(const char *__restrict__, ...)
  -> EXTERN: (52,7) printf(const char *__restrict__, ...)
  -> EXTERN: (55,5) printf(const char *__restrict__, ...)
  -> EXTERN: (58,3) printf(const char *__restrict__, ...)
  -> EXTERN: (59,3) printf(const char *__restrict__, ...)
  -> EXTERN: (61,3) printf(const char *__restrict__, ...)
  -> EXTERN: (62,3) printf(const char *__restrict__, ...)
  -> EXTERN: (66,3) printf(const char *__restrict__, ...)
  -> EXTERN: (67,3) printf(const char *__restrict__, ...)
  -> EXTERN: (69,3) printf(const char *__restrict__, ...)
  -> EXTERN: (71,5) printf(const char *__restrict__, ...)
  -> EXTERN: (73,5) printf(const char *__restrict__, ...)
  -> EXTERN: (74,3) printf(const char *__restrict__, ...)
  -> EXTERN: (75,3) printf(const char *__restrict__, ...)
  -> EXTERN: (77,3) printf(const char *__restrict__, ...)
  -> EXTERN: (79,3) printf(const char *__restrict__, ...)
  -> EXTERN: (80,3) printf(const char *__restrict__, ...)
  -> EXTERN: (81,3) printf(const char *__restrict__, ...)
  -> EXTERN: (82,3) printf(const char *__restrict__, ...)
  -> EXTERN: (83,3) printf(const char *__restrict__, ...)
  -> EXTERN: (84,3) printf(const char *__restrict__, ...)
  -> EXTERN: (86,3) printf(const char *__restrict__, ...)

===========================================================================

Begin optimization report for: wtime_(double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (wtime_(double *)) [3/18=16.7%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/wtime.c(8,1)
  -> EXTERN: (12,4) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)

===========================================================================

Begin optimization report for: elapsed_time(void)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (elapsed_time(void)) [4/18=22.2%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/c_timers.c(15,1)
  -> (22,5) wtime_(double *) (isz = 15) (sz = 20)
     [[ Callee not marked with inlining pragma  <1>]]

===========================================================================

Begin optimization report for: timer_stop(int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (timer_stop(int)) [5/18=27.8%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/c_timers.c(57,1)
  -> (60,11) elapsed_time(void) (isz = 2) (sz = 7)
     [[ Callee not marked with inlining pragma  <1>]]

===========================================================================

Begin optimization report for: conj_grad(int *, int *, double *, double *, double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (conj_grad(int *, int *, double *, double *, double *, double *, double *, double *, double *)) [6/18=33.3%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(448,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(463,3)
<Peeled loop for vectorization>
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(463,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #25427: Loop Statements Reordered
   remark #15389: vectorization support: reference r[j] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(466,5) ]
   remark #15389: vectorization support: reference x[j] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(466,12) ]
   remark #15389: vectorization support: reference q[j] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(464,5) ]
   remark #15389: vectorization support: reference z[j] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(465,5) ]
   remark #15389: vectorization support: reference p[j] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(467,5) ]
   remark #15389: vectorization support: reference r[j] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(467,12) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.158
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 16 
   remark #15477: vector cost: 4.750 
   remark #15478: estimated potential speedup: 3.210 
   remark #15488: --- end vector cost summary ---
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(463,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(475,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(475,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference r[j] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(476,17) ]
   remark #15389: vectorization support: reference r[j] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(476,22) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 4.143
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 1.750 
   remark #15478: estimated potential speedup: 4.140 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(475,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(484,3)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between p[*(colidx+k*4)] (512:9) and p[j] (594:7)
   remark #17106: parallel dependence: assumed FLOW dependence between p[j] (594:7) and p[*(colidx+k*4)] (512:9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(509,5)
      remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(511,7)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(511,7)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference a[k] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(512,23) ]
         remark #15389: vectorization support: reference colidx[k] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(512,30) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15328: vectorization support: irregularly indexed load was emulated for the variable <p[*(colidx+k*4)]>, part of index is read from memory   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(512,28) ]
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 2.167
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15462: unmasked indexed (or gather) loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 11 
         remark #15477: vector cost: 6.000 
         remark #15478: estimated potential speedup: 1.790 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(511,7)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(559,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(559,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference p[j] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(560,15) ]
      remark #15389: vectorization support: reference q[j] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(560,20) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 4.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 2.000 
      remark #15478: estimated potential speedup: 3.650 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(559,5)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(573,5)
   <Peeled loop for vectorization>
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(573,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #25427: Loop Statements Reordered
      remark #15389: vectorization support: reference r[j] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(575,7) ]
      remark #15389: vectorization support: reference r[j] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(575,14) ]
      remark #15389: vectorization support: reference q[j] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(575,27) ]
      remark #15389: vectorization support: reference z[j] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(574,7) ]
      remark #15389: vectorization support: reference z[j] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(574,14) ]
      remark #15389: vectorization support: reference p[j] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(574,27) ]
      remark #15389: vectorization support: reference r[j] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(581,19) ]
      remark #15389: vectorization support: reference r[j] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(581,24) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.654
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15451: unmasked unaligned unit stride stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 27 
      remark #15477: vector cost: 6.500 
      remark #15478: estimated potential speedup: 3.900 
      remark #15488: --- end vector cost summary ---
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
   LOOP END

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(573,5)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(593,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(593,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference p[j] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(594,7) ]
      remark #15389: vectorization support: reference r[j] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(594,14) ]
      remark #15389: vectorization support: reference p[j] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(594,26) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.750
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 10 
      remark #15477: vector cost: 2.000 
      remark #15478: estimated potential speedup: 4.640 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(593,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(604,3)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(606,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(606,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference a[k] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(607,21) ]
      remark #15389: vectorization support: reference colidx[k] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(607,28) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <z[*(colidx+k*4)]>, part of index is read from memory   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(607,26) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 2.167
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 6.000 
      remark #15478: estimated potential speedup: 1.790 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(606,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(616,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(616,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference x[j] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(617,12) ]
   remark #15389: vectorization support: reference r[j] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(617,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.615
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 12 
   remark #15477: vector cost: 3.250 
   remark #15478: estimated potential speedup: 3.440 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(616,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: timer_start(int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (timer_start(int)) [7/18=38.9%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/c_timers.c(48,1)
  -> (49,16) elapsed_time(void) (isz = 2) (sz = 7)
     [[ Callee not marked with inlining pragma  <1>]]

===========================================================================

Begin optimization report for: sparse(double *, int *, int *, int, int, int, int *, int (*)[14], double (*)[14], int, int, int *, double *, int *, int *, double, double)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (sparse(double *, int *, int *, int, int, int, int *, int (*)[14], double (*)[14], int, int, int *, double *, int *, int *, double, double)) [8/18=44.4%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(746,1)
  -> EXTERN: (813,7) printf(const char *__restrict__, ...)
  -> EXTERN: (814,7) printf(const char *__restrict__, ...)
  -> EXTERN: (816,5) exit(int)
  -> EXTERN: (834,11) pow(double, double)
  -> EXTERN: (885,11) printf(const char *__restrict__, ...)
  -> EXTERN: (886,11) exit(int)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(767,3)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between rowstr[j] (767:3) and rowstr[j] (768:5)
   remark #17106: parallel dependence: assumed OUTPUT dependence between rowstr[j] (768:5) and rowstr[j] (767:3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(767,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference rowstr[j] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(768,5) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 4.000 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(767,3)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(771,3)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between rowstr[j] (776:9) and rowstr[j] (776:9)
   remark #15346: vector dependence: assumed OUTPUT dependence between rowstr[j] (776:9) and rowstr[j] (776:9)

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(772,5)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between rowstr[j] (776:9) and rowstr[j] (776:9)
      remark #15346: vector dependence: assumed ANTI dependence between rowstr[j] (776:9) and rowstr[j] (776:9)
      remark #25015: Estimate of max trip count of loop=14
   LOOP END
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(785,3)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between rowstr[j] (786:5) and rowstr[j-1] (786:5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between rowstr[j] (786:5) and rowstr[j-1] (786:5)
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(793,5)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(793,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference last_n[i] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(794,23) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 7.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.620 
   remark #15478: estimated potential speedup: 3.580 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(793,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(798,5)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(798,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference rowstr[j] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(799,7) ]
   remark #15389: vectorization support: reference rowstr[j] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(799,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 2.200
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.620 
   remark #15478: estimated potential speedup: 6.840 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(798,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(822,3)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between v[k] (824:7) and v[k] (824:7)
   remark #17106: parallel dependence: assumed OUTPUT dependence between v[k] (824:7) and v[k] (824:7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(823,5)
   <Peeled loop for vectorization, Distributed chunk1>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(823,5)
   <Distributed chunk1>
      remark #17108: loop was not parallelized: insufficient computational work
      remark #25426: Loop Distributed (2 way) 
      remark #15389: vectorization support: reference v[k] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(824,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15301: PARTIAL LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 4.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(823,5)
   <Remainder loop for vectorization, Distributed chunk1>
   LOOP END

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(823,5)
   <Peeled loop for vectorization, Distributed chunk2>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(823,5)
   <Distributed chunk2>
      remark #15389: vectorization support: reference iv[k] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(825,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15301: PARTIAL LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.370 
      remark #15478: estimated potential speedup: 5.840 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(823,5)
   <Remainder loop for vectorization, Distributed chunk2>
   LOOP END
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(861,13)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between v[kk] (863:17) and v[kk+1] (863:17)
   remark #17106: parallel dependence: assumed ANTI dependence between iv[kk] (862:15) and iv[kk+1] (864:17)
   remark #17106: parallel dependence: assumed ANTI dependence between iv[kk] (864:17) and iv[kk+1] (864:17)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <iv[kk]>, stride is -1   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(862,19) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <v[kk+1]>, masked, stride is -1   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(863,17) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <v[kk]>, masked, stride is -1   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(863,28) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <iv[kk+1]>, masked, stride is -1   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(864,17) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <iv[kk]>, stride is -1   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(864,28) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 2 
   remark #15460: masked strided loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 16 
   remark #15477: vector cost: 59.000 
   remark #15478: estimated potential speedup: 0.270 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(898,3)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between nzloc[j] (899:5) and nzloc[j-1] (899:5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between nzloc[j] (899:5) and nzloc[j-1] (899:5)
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(906,5)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(906,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference last_n[i] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(907,23) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 7.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.620 
   remark #15478: estimated potential speedup: 3.580 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(906,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(911,5)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(911,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference nzloc[j] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(912,7) ]
   remark #15389: vectorization support: reference nzloc[j] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(912,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 2.200
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.620 
   remark #15478: estimated potential speedup: 6.840 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(911,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(918,3)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between a[k] (927:7) and a[k] (927:7)
   remark #17106: parallel dependence: assumed OUTPUT dependence between a[k] (927:7) and a[k] (927:7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(926,5)
   <Peeled loop for vectorization, Distributed chunk1>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(926,5)
   <Distributed chunk1>
      remark #17108: loop was not parallelized: insufficient computational work
      remark #25426: Loop Distributed (2 way) 
      remark #15389: vectorization support: reference a[k] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(927,7) ]
      remark #15389: vectorization support: reference v[nza] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(927,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15301: PARTIAL LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 4.550 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(926,5)
   <Remainder loop for vectorization, Distributed chunk1>
   LOOP END

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(926,5)
   <Peeled loop for vectorization, Distributed chunk2>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(926,5)
   <Distributed chunk2>
      remark #15389: vectorization support: reference colidx[k] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(928,7) ]
      remark #15389: vectorization support: reference iv[nza] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(928,19) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 3.250
      remark #15301: PARTIAL LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 0.500 
      remark #15478: estimated potential speedup: 6.910 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(926,5)
   <Remainder loop for vectorization, Distributed chunk2>
   LOOP END
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(933,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(933,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference rowstr[j] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(934,5) ]
   remark #15389: vectorization support: reference rowstr[j] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(934,17) ]
   remark #15389: vectorization support: reference nzloc[j-1] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(934,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 2.167
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 7.380 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(933,3)
<Remainder loop for vectorization>
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(836,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(856,9) ]
   remark #17102: loop was not parallelized: not a parallelization candidate

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(837,5)
      remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(856,9) ]
      remark #17102: loop was not parallelized: not a parallelization candidate

      LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(843,7)
         remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(856,9) ]
         remark #17102: loop was not parallelized: not a parallelization candidate

         LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(856,9)
            remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
            remark #17102: loop was not parallelized: not a parallelization candidate
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: vecset(int, double *, int *, int *, int, double)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (vecset(int, double *, int *, int *, int, double)) [9/18=50.0%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(998,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(1003,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(1003,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference v[k] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(1005,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.818
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 13 
   remark #15477: vector cost: 2.750 
   remark #15478: estimated potential speedup: 4.410 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(1003,3)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference v[k] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(1005,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 13 
   remark #15477: vector cost: 2.750 
   remark #15478: estimated potential speedup: 4.410 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: randlc(double *, double)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (randlc(double *, double)) [10/18=55.6%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/randdp.c(5,1)

===========================================================================

Begin optimization report for: icnvrt(double, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (icnvrt(double, int)) [11/18=61.1%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(988,1)

===========================================================================

Begin optimization report for: sprnvc(int, int, int, double *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (sprnvc(int, int, int, double *, int *)) [12/18=66.7%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(950,1)
  -> (957,14) randlc(double *, double) (isz = 45) (sz = 54)
     [[ Callee not marked with inlining pragma  <1>]]
  -> (962,14) randlc(double *, double) (isz = 45) (sz = 54)
     [[ Callee not marked with inlining pragma  <1>]]
  -> (963,9) icnvrt(double, int) (isz = 1) (sz = 9)
     [[ Callee not marked with inlining pragma  <1>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(956,3)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(970,5)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(971,7) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: makea(int, int, double *, int *, int *, int, int, int, int, int *, int (*)[14], double (*)[14], double *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (makea(int, int, double *, int *, int *, int, int, int, int, int *, int (*)[14], double (*)[14], double *, int *)) [13/18=72.2%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(665,1)
  -> EXTERN: (686,17) omp_get_num_threads(void)
  -> EXTERN: (687,10) omp_get_thread_num(void)
  -> EXTERN: (690,7) printf(const char *__restrict__, ...)
  -> (702,5) sprnvc(int, int, int, double *, int *) (isz = 51) (sz = 64)
     [[ Callee not marked with inlining pragma  <1>]]
  -> (704,7) vecset(int, double *, int *, int *, int, double) (isz = 32) (sz = 47)
     [[ Callee not marked with inlining pragma  <1>]]
  -> (719,3) sparse(double *, int *, int *, int, int, int, int *, int (*)[14], double (*)[14], int, int, int *, double *, int *, int *, double, double) (isz = 549) (sz = 586)
     [[ Callee not marked with inlining pragma  <1>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(678,3)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(700,3)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between nzv (701:5) and nzv (704:7)
   remark #17106: parallel dependence: assumed OUTPUT dependence between nzv (704:7) and nzv (701:5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(706,7)
   <Distributed chunk1>
      remark #17108: loop was not parallelized: insufficient computational work
      remark #25426: Loop Distributed (2 way) 
      remark #15389: vectorization support: reference acol[iouter][ivelt] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(707,9) ]
      remark #15388: vectorization support: reference ivc[ivelt] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(707,31) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.375
      remark #15301: PARTIAL LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 2.000 
      remark #15478: estimated potential speedup: 1.890 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(706,7)
   <Remainder loop for vectorization, Distributed chunk1>
      remark #25015: Estimate of max trip count of loop=14
   LOOP END

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(706,7)
   <Distributed chunk2>
      remark #15389: vectorization support: reference aelt[iouter][ivelt] has unaligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(708,9) ]
      remark #15388: vectorization support: reference vc[ivelt] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(708,31) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15301: PARTIAL LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 2.150 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(706,7)
   <Remainder loop for vectorization, Distributed chunk2>
      remark #25015: Estimate of max trip count of loop=14
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: timer_clear(int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (timer_clear(int)) [14/18=77.8%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/c_timers.c(38,1)

===========================================================================

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [15/18=83.3%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(143,1)
  -> (158,5) timer_clear(int) (isz = 2) (sz = 7)
     [[ Callee not marked with inlining pragma  <1>]]
  -> EXTERN: (162,13) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (167,5) fclose(FILE *)
  -> (172,3) timer_start(int) (isz = 2) (sz = 7)
     [[ Callee not marked with inlining pragma  <1>]]
  -> EXTERN: (204,3) printf(const char *__restrict__, ...)
  -> EXTERN: (205,3) printf(const char *__restrict__, ...)
  -> EXTERN: (206,3) printf(const char *__restrict__, ...)
  -> EXTERN: (207,3) printf(const char *__restrict__, ...)
  -> EXTERN: (207,49) omp_get_max_threads(void)
  -> EXTERN: (208,3) printf(const char *__restrict__, ...)
  -> (220,15) randlc(double *, double) (isz = 45) (sz = 54)
     [[ Callee not marked with inlining pragma  <1>]]
  -> (225,5) makea(int, int, double *, int *, int *, int, int, int, int, int *, int (*)[14], double (*)[14], double *, int *) (isz = 104) (sz = 135)
     [[ Callee not marked with inlining pragma  <1>]]
  -> (276,5) conj_grad(int *, int *, double *, double *, double *, double *, double *, double *, double *) (isz = 306) (sz = 327)
     [[ Inlining would exceed -inline-max-size value (327>230) <2>]]
  -> (315,3) timer_stop(int) (isz = 12) (sz = 17)
     [[ Callee not marked with inlining pragma  <1>]]
  -> EXTERN: (317,3) printf(const char *__restrict__, ...)
  -> (317,53) timer_read(int) (isz = 0) (sz = 6)
     [[ Callee not marked with inlining pragma  <1>]]
  -> (319,3) timer_start(int) (isz = 2) (sz = 7)
     [[ Callee not marked with inlining pragma  <1>]]
  -> (330,18) timer_start(int) (isz = 2) (sz = 7)
     [[ Callee not marked with inlining pragma  <1>]]
  -> (331,5) conj_grad(int *, int *, double *, double *, double *, double *, double *, double *, double *) (isz = 306) (sz = 327)
     [[ Inlining would exceed -inline-max-size value (327>230) <2>]]
  -> (332,18) timer_stop(int) (isz = 12) (sz = 17)
     [[ Callee not marked with inlining pragma  <1>]]
  -> EXTERN: (353,7) printf(const char *__restrict__, ...)
  -> EXTERN: (354,5) printf(const char *__restrict__, ...)
  -> (365,3) timer_stop(int) (isz = 12) (sz = 17)
     [[ Callee not marked with inlining pragma  <1>]]
  -> (371,7) timer_read(int) (isz = 0) (sz = 6)
     [[ Callee not marked with inlining pragma  <1>]]
  -> EXTERN: (373,3) printf(const char *__restrict__, ...)
  -> EXTERN: (380,7) printf(const char *__restrict__, ...)
  -> EXTERN: (381,7) printf(const char *__restrict__, ...)
  -> EXTERN: (382,7) printf(const char *__restrict__, ...)
  -> EXTERN: (385,7) printf(const char *__restrict__, ...)
  -> EXTERN: (386,7) printf(const char *__restrict__, ...)
  -> EXTERN: (387,7) printf(const char *__restrict__, ...)
  -> (404,3) print_results(char *, char, int, int, int, int, double, double, char *, logical, char *, char *, char *, char *, char *, char *, char *, char *, char *) (isz = 148) (sz = 189)
     [[ Callee not marked with inlining pragma  <1>]]
  -> (414,12) timer_read(int) (isz = 0) (sz = 6)
     [[ Callee not marked with inlining pragma  <1>]]
  -> EXTERN: (416,5) printf(const char *__restrict__, ...)
  -> (418,11) timer_read(int) (isz = 0) (sz = 6)
     [[ Callee not marked with inlining pragma  <1>]]
  -> EXTERN: (420,9) printf(const char *__restrict__, ...)
  -> EXTERN: (422,9) printf(const char *__restrict__, ...)
  -> EXTERN: (425,11) printf(const char *__restrict__, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(157,3)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15382: vectorization support: call to function timer_clear(int) cannot be vectorized   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(158,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(243,5)
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ } private={ } firstprivate={ k j } lastprivate={ } firstlastprivate={ } reduction={ }
   remark #15388: vectorization support: reference rowstr[j] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(244,16) ]
   remark #15305: vectorization support: vector length 8
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 5.330 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=9375
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(253,5)
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ } private={ } firstprivate={ i } lastprivate={ } firstlastprivate={ } reduction={ }
   remark #15388: vectorization support: reference x[i] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(254,7) ]
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=18750
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(253,5)
<Remainder loop for vectorization>
   remark #25015: Estimate of max trip count of loop=75001
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(257,5)
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ } private={ } firstprivate={ j } lastprivate={ } firstlastprivate={ } reduction={ }
   remark #15388: vectorization support: reference q[j] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(258,7) ]
   remark #15388: vectorization support: reference z[j] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(259,7) ]
   remark #15388: vectorization support: reference r[j] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(260,7) ]
   remark #15388: vectorization support: reference p[j] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(261,7) ]
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 12 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 4.000 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=18750
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(288,5)
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ } private={ } firstprivate={ j } lastprivate={ } firstlastprivate={ } reduction={ norm_temp2 }
   remark #15388: vectorization support: reference z[j] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(290,33) ]
   remark #15388: vectorization support: reference z[j] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(290,40) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.714
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 1.750 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   remark #25015: Estimate of max trip count of loop=18750
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(299,5)
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ } private={ } firstprivate={ norm_temp2 j norm_temp2 } lastprivate={ } firstlastprivate={ } reduction={ }
   remark #15388: vectorization support: reference x[j] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(300,7) ]
   remark #15388: vectorization support: reference z[j] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(300,27) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.200
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.790 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=18750
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(309,3)
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ } private={ } firstprivate={ i } lastprivate={ } firstlastprivate={ } reduction={ }
   remark #15388: vectorization support: reference x[i] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(310,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=18750
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(309,3)
<Remainder loop for vectorization>
   remark #25015: Estimate of max trip count of loop=75001
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(326,3)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=75

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(344,5)
      remark #17109: LOOP WAS AUTO-PARALLELIZED
      remark #17101: parallel loop shared={ } private={ } firstprivate={ j it } lastprivate={ } firstlastprivate={ } reduction={ norm_temp1 norm_temp2 }
      remark #15388: vectorization support: reference x[j] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(345,33) ]
      remark #15388: vectorization support: reference z[j] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(345,38) ]
      remark #15388: vectorization support: reference z[j] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(346,33) ]
      remark #15388: vectorization support: reference z[j] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(346,38) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 2.714
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 15 
      remark #15477: vector cost: 3.500 
      remark #15478: estimated potential speedup: 4.280 
      remark #15488: --- end vector cost summary ---
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
      remark #25015: Estimate of max trip count of loop=18750
   LOOP END

   LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(360,5)
      remark #17109: LOOP WAS AUTO-PARALLELIZED
      remark #17101: parallel loop shared={ } private={ } firstprivate={ norm_temp2 j it } lastprivate={ } firstlastprivate={ } reduction={ }
      remark #15388: vectorization support: reference x[j] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(361,7) ]
      remark #15388: vectorization support: reference z[j] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(361,27) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.200
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 4.790 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=18750
   LOOP END
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(417,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15382: vectorization support: call to function timer_read(int) cannot be vectorized   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(418,11) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(420,9) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(422,9) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(425,11) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(243,5)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(243,5)
   remark #15388: vectorization support: reference rowstr[j] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(244,16) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 5.320 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=9375
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(243,5)
<Remainder loop for vectorization>
   remark #25015: Estimate of max trip count of loop=75000
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(253,5)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(253,5)
   remark #15388: vectorization support: reference x[i] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(254,7) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=18750
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(253,5)
<Remainder loop for vectorization>
   remark #25015: Estimate of max trip count of loop=75001
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(257,5)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(257,5)
   remark #15388: vectorization support: reference q[j] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(258,7) ]
   remark #15388: vectorization support: reference z[j] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(259,7) ]
   remark #15388: vectorization support: reference r[j] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(260,7) ]
   remark #15388: vectorization support: reference p[j] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(261,7) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 12 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=18750
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(257,5)
<Remainder loop for vectorization>
   remark #25015: Estimate of max trip count of loop=75000
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(288,5)
<Peeled loop for vectorization>
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(288,5)
   remark #15388: vectorization support: reference z[j] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(290,33) ]
   remark #15388: vectorization support: reference z[j] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(290,40) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 4.143
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 1.750 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   remark #25015: Estimate of max trip count of loop=18750
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(288,5)
<Remainder loop for vectorization>
   remark #25015: Estimate of max trip count of loop=75000
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(299,5)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(299,5)
   remark #15388: vectorization support: reference x[j] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(300,7) ]
   remark #15388: vectorization support: reference z[j] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(300,27) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.200
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.790 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=18750
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(299,5)
<Remainder loop for vectorization>
   remark #25015: Estimate of max trip count of loop=75000
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(309,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(309,3)
   remark #15388: vectorization support: reference x[i] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(310,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=18750
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(309,3)
<Remainder loop for vectorization>
   remark #25015: Estimate of max trip count of loop=75001
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(344,5)
<Peeled loop for vectorization>
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(344,5)
   remark #15388: vectorization support: reference x[j] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(345,33) ]
   remark #15388: vectorization support: reference z[j] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(345,38) ]
   remark #15388: vectorization support: reference z[j] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(346,33) ]
   remark #15388: vectorization support: reference z[j] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(346,38) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.429
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 15 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 4.280 
   remark #15488: --- end vector cost summary ---
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
   remark #25015: Estimate of max trip count of loop=18750
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(344,5)
<Remainder loop for vectorization>
   remark #25015: Estimate of max trip count of loop=75000
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(360,5)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(360,5)
   remark #15388: vectorization support: reference x[j] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(361,7) ]
   remark #15388: vectorization support: reference z[j] has aligned access   [ /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(361,27) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.200
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.790 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=18750
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/CG/src/cg.c(360,5)
<Remainder loop for vectorization>
   remark #25015: Estimate of max trip count of loop=75000
LOOP END
===========================================================================

Begin optimization report for: c_print_results(char *, char, int, int, int, int, double, double, char *, int, char *, char *, char *, char *, char *, char *, char *, char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (c_print_results(char *, char, int, int, int, int, double, double, char *, int, char *, char *, char *, char *, char *, char *, char *, char *)) [16/18=88.9%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/c_print_results.c(28,1)
  -> EXTERN: (46,5) printf(const char *__restrict__, ...)
  -> EXTERN: (48,5) printf(const char *__restrict__, ...)
  -> EXTERN: (53,9) printf(const char *__restrict__, ...)
  -> EXTERN: (56,9) printf(const char *__restrict__, ...)
  -> EXTERN: (58,5) printf(const char *__restrict__, ...)
  -> EXTERN: (60,5) printf(const char *__restrict__, ...)
  -> EXTERN: (62,5) printf(const char *__restrict__, ...)
  -> EXTERN: (64,5) printf(const char *__restrict__, ...)
  -> EXTERN: (69,5) printf(const char *__restrict__, ...)
  -> EXTERN: (71,5) printf(const char *__restrict__, ...)
  -> EXTERN: (74,5) printf(const char *__restrict__, ...)
  -> EXTERN: (77,9) printf(const char *__restrict__, ...)
  -> EXTERN: (79,9) printf(const char *__restrict__, ...)
  -> EXTERN: (81,9) printf(const char *__restrict__, ...)
  -> EXTERN: (83,5) printf(const char *__restrict__, ...)
  -> EXTERN: (85,5) printf(const char *__restrict__, ...)
  -> EXTERN: (87,5) printf(const char *__restrict__, ...)
  -> EXTERN: (89,5) printf(const char *__restrict__, ...)
  -> EXTERN: (91,5) printf(const char *__restrict__, ...)
  -> EXTERN: (93,5) printf(const char *__restrict__, ...)
  -> EXTERN: (95,5) printf(const char *__restrict__, ...)
  -> EXTERN: (97,5) printf(const char *__restrict__, ...)
  -> EXTERN: (99,5) printf(const char *__restrict__, ...)
  -> EXTERN: (101,5) printf(const char *__restrict__, ...)
  -> EXTERN: (102,5) printf(const char *__restrict__, ...)
  -> EXTERN: (103,5) printf(const char *__restrict__, ...)
  -> EXTERN: (104,5) printf(const char *__restrict__, ...)
  -> EXTERN: (105,5) printf(const char *__restrict__, ...)
  -> EXTERN: (106,5) printf(const char *__restrict__, ...)

===========================================================================

Begin optimization report for: timer_count(int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (timer_count(int)) [17/18=94.4%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/c_timers.c(77,1)

===========================================================================

Begin optimization report for: vranlc(int, double *, double, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (vranlc(int, double *, double, double *)) [18/18=100.0%] /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/randdp.c(72,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/randdp.c(122,3)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between *x (129:5) and *x (136:6)
   remark #17106: parallel dependence: assumed FLOW dependence between *x (136:6) and *x (129:5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between *x (129:5) and *x (136:6)
   remark #15346: vector dependence: assumed FLOW dependence between *x (136:6) and *x (129:5)
LOOP END

LOOP BEGIN at /home/s1736883/Work/PParMetrics/benchmarks/snu-npb/nauseous-omp/common/randdp.c(122,3)
<Multiversioned v2>
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between *x (129:5) and y[i] (137:5)
   remark #17106: parallel dependence: assumed FLOW dependence between y[i] (137:5) and *x (129:5)
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END
===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The compiler's heuristics indicate that the function is not profitable to 
    inline.  Override this decision by adding "inline 
    __attribute__((always_inline))" to the declaration of the called function, 
    or add "#pragma forceinline" before the call site.

<2> The function is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any function that would
    normally be inlined, add "inline __attribute__((always_inline))" to the
    declaration of the called function, or add "#pragma forceinline" before
    the call site.

